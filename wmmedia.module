<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\wmmedia\Plugin\Field\FieldType\MediaImageExtras;
use Drupal\wmmedia\Service\UsageManager;

/**
 * Implements @see hook_theme().
 */
function wmmedia_theme(): array
{
    $data = [];

    $data['wmmedia_gallery'] = [
        'template' => 'wmmedia-gallery',
        'variables' => [
            '_data' => [],
        ],
        'preprocess functions' => [
            'wmmedia_theme_set_variables',
        ],
    ];

    $data['wmmedia_image'] = [
        'template' => 'wmmedia-image',
        'variables' => [
            'field' => null,
            'image_style' => 'default',
        ],
    ];

    return $data;
}

function wmmedia_theme_set_variables(&$variables)
{
    // Skip if no data is set or not set as an array
    if (!isset($variables['_data']) || !is_array($variables['_data'])) {
        return;
    }

    $variables = array_merge($variables, $variables['_data']);
    unset($variables['_data']);
}

/**
 * Implements @see hook_preprocess_HOOK().
 */
function wmmedia_preprocess_wmmedia_image(array &$variables): void
{
    if (!isset($variables['field']) || !$variables['field'] instanceof MediaImageExtras) {
        return;
    }

    if (!$file = $variables['field']->getFile()) {
        return;
    }

    $path = $file->getFileUri();
    $imageStyleName = $variables['image_style'] ?? $variables['preset'] ?? 'medium';

    if (!$imageStyle = ImageStyle::load($variables['image_style'])) {
        return;
    }

    if (!$imageStyle->supportsUri($path)) {
        return;
    }

    $variables['uri'] = \Drupal::service('file_url_generator')->transformRelative($imageStyle->buildUrl($path));
    $variables['alternate'] = $variables['field']->getAlternate();
    $variables['caption'] = $variables['field']->getDescription();
    $variables['copyright'] = $variables['field']->getCopyright();
    $variables['title'] = $variables['field']->getTitle();
    $variables['image_style'] = $imageStyleName;
}

/**
 * Implements @see hook_menu_local_actions_alter().
 */
function wmmedia_menu_local_actions_alter(&$local_actions)
{
    if (isset($local_actions['media.add'])) {
        $appearsOn = &$local_actions['media.add']['appears_on'];
        $key = array_search('entity.media.collection', $appearsOn, true);

        if ($key !== false) {
            unset($appearsOn[$key]);
        }
    }
}

/**
 * Implements @see hook_locale_translation_projects_alter().
 */
function wmmedia_locale_translation_projects_alter(&$projects)
{
    $path = \Drupal::getContainer()->get('extension.path.resolver')->getPath('module', 'wmmedia') . '/translations/%language.po';
    $projects['wmmedia']['info']['interface translation server pattern'] = $path;
}

/**
 * Implements @see hook_entity_operation_alter().
 */
function wmmedia_entity_operation_alter(array &$operations, EntityInterface $entity)
{
    if ($entity instanceof Media) {
        /* @var UsageManager $service */
        $service = \Drupal::service('wmmedia.usage');
        $service->setOperations($entity, $operations);
    }
}

/**
 * Implements @see hook_form_FORM_ID_alter().
 */
function wmmedia_form_media_form_alter(&$form, FormStateInterface $formState, $formId)
{
    \Drupal::getContainer()
        ->get('wmmedia.form_alter.subscriber')
        ->mediaFormAlter($form, $formState);
}

/**
 * Implements @see hook_form_FORM_ID_alter().
 */
function wmmedia_form_media_file_delete_form_alter(&$form, FormStateInterface $formState)
{
    \Drupal::getContainer()
        ->get('wmmedia.usage.subscriber.form')
        ->addWarning($form, $formState);
}

/**
 * Implements @see hook_inline_entity_form_entity_form_alter().
 */
function wmmedia_inline_entity_form_entity_form_alter(array &$form, FormStateInterface $formState)
{
    \Drupal::getContainer()
        ->get('wmmedia.form_alter.subscriber')
        ->entityBrowserImagesFormAlter($form, $formState);
}

/**
 * Implements @see hook_entity_presave().
 */
function wmmedia_entity_presave(EntityInterface $entity)
{
    \Drupal::getContainer()
        ->get('wmmedia.entity.image.subscriber')
        ->onPreSave($entity);

    \Drupal::getContainer()
        ->get('wmmedia.entity_form_display.subscriber')
        ->onPreSave($entity);
}

/**
 * Implements @see hook_entity_delete().
 */
function wmmedia_entity_delete(EntityInterface $entity)
{
    \Drupal::getContainer()
        ->get('wmmedia.entity.delete.subscriber')
        ->deleteFile($entity);

    \Drupal::getContainer()
        ->get('wmmedia.usage.subscriber.entity')
        ->clearUsage($entity);
}

/**
 * Implements @see hook_entity_insert().
 */
function wmmedia_entity_insert(EntityInterface $entity)
{
    \Drupal::getContainer()
        ->get('wmmedia.usage.subscriber.entity')
        ->trackUsage($entity);
}

/**
 * Implements @see hook_entity_update().
 */
function wmmedia_entity_update(EntityInterface $entity)
{
    \Drupal::getContainer()
        ->get('wmmedia.usage.subscriber.entity')
        ->trackUsage($entity);
}

/**
 * Implements @see hook_library_info_alter().
 */
function wmmedia_library_info_alter(array &$libraries, string $extension): void
{
    if ($extension !== 'wmmedia') {
        return;
    }

    if (_wmmedia_theme_is_active('gin')) {
        unset($libraries['image_browser']['css']['theme']['assets/dist/image_browser_checkbox.css']);
    }
}

function _wmmedia_theme_is_active(string $themeNameToCheck): bool
{
    $themeHandler = \Drupal::service('theme_handler')->listInfo();
    $themeConfig = \Drupal::config('system.theme');
    $themeNames = [];

    foreach (['default', 'admin'] as $type) {
        if (!$themeName = $themeConfig->get($type)) {
            continue;
        }

        $themeNames[$themeName] = $themeName;

        if (isset($themeHandler[$themeName]->base_themes)) {
            $themeNames = array_merge($themeNames, $themeHandler[$themeName]->base_themes);
        }
    }

    return array_key_exists($themeNameToCheck, $themeNames);
}
