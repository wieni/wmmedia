<?php

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\EntityFieldManagerInterface;
use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
use Drupal\Core\Site\Settings;
use Drupal\entity_browser\Entity\EntityBrowser;
use Drupal\entity_browser\WidgetInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\MediaType;
use Drupal\media\MediaInterface;
use Drupal\wmmedia\Install\MediaBaseFieldDefinitions;
use Drupal\wmmedia\Service\UsageManager;

function wmmedia_schema()
{
    $schema = [];

    $schema['wmmedia_usage'] = [
        'description' => 'Media usage.',
        'fields' => [
            'id' => [
                'not null' => true,
                'type' => 'serial',
                'unsigned' => true,
            ],
            'media_id' => [
                'not null' => true,
                'type' => 'int',
                'unsigned' => true,
            ],
            'media_type' => [
                'length' => 38,
                'not null' => true,
                'type' => 'varchar',
            ],
            'entity_id' => [
                'not null' => true,
                'type' => 'int',
                'unsigned' => true,
            ],
            'entity_type' => [
                'not null' => true,
                'type' => 'varchar',
                'length' => 38,
            ],
            'field_name' => [
                'length' => 32,
                'not null' => true,
                'type' => 'varchar',
            ],
            'field_type' => [
                'length' => 255,
                'not null' => true,
                'type' => 'varchar',
            ],
            'required' => [
                'default' => 0,
                'not null' => true,
                'size' => 'tiny',
                'type' => 'int',
            ],
            'language_code' => [
                'length' => 3,
                'not null' => true,
                'type' => 'varchar',
            ],
        ],
        'primary key' => ['id'],
        'indexes' => [
            'media' => [
                'media_id',
                'media_type',
                'entity_id',
                'entity_type',
            ],
        ],
    ];

    return $schema;
}

/**
 * Update and reset the usage table.
 */
function wmmedia_update_8001()
{
    $definition = wmmedia_schema();
    $field = $definition['wmmedia_usage']['fields']['required'] ?? [];

    if (empty($field)) {
        return;
    }

    $schema = \Drupal::database()->schema();

    if (!$schema->tableExists('wmmedia_usage')) {
        return;
    }

    if ($schema->fieldExists('wmmedia_usage', 'required')) {
        return;
    }

    $schema->addField('wmmedia_usage', 'required', $field);

    $query = \Drupal::database()->query('ALTER TABLE wmmedia_usage MODIFY COLUMN required TINYINT(4) NOT NULL DEFAULT 0 AFTER field_type');
    $query->execute();

    $query = \Drupal::database()->query('TRUNCATE TABLE wmmedia_usage');
    $query->execute();

    /* @var UsageManager $service */
    $service = \Drupal::service('wmmedia.usage');
    $service->generate();
}


/**
 * Create the wmmedia_usage table if it does not yet exist.
 */
function wmmedia_update_8002()
{
    $definition = wmmedia_schema();
    $schema = \Drupal::database()->schema();

    if ($schema->tableExists('wmmedia_usage')) {
        return;
    }

    $schema->createTable('wmmedia_usage', $definition['wmmedia_usage']);
}

/**
 * Change old entity browser to the new ones
 */
function wmmedia_update_8003(): void
{
    /** @var EntityBrowser $entityBrowser */
    foreach (EntityBrowser::loadMultiple() as $entityBrowser) {

        /** @var WidgetInterface $widget */
        $widgets = $entityBrowser->getWidgets();
        foreach ($widgets as $widget) {
            if ($widget->id() === 'wmmedia_media_file_add') {
                $widget->setConfiguration([
                    'id' => 'wmmedia_media_file_browser',
                    'submit_text' => 'Select file',
                    'auto_select' => 0,
                ]);
                $entityBrowser->save();
            }

            if ($widget->id() === 'wmmedia_media_image_add') {
                $widgets->remove('wmmedia_media_image_add');
            }
        }
    }
}

/**
 * Migrate field_media_imgix to field_image
 */
function wmmedia_update_8004(): void
{
    $moduleStorage = new FileStorage(__DIR__ . '/config/install');
    $siteStorage = new FileStorage(Settings::get('config_sync_directory'));

    // Install field_image
    if (!FieldStorageConfig::loadByName('media', 'field_image')) {
        if ($siteStorage->exists('field.storage.media.field_image')) {
            $data = $siteStorage->read('field.storage.media.field_image');
        } else {
            $data = $moduleStorage->read('field.storage.media.field_image');
        }

        $config = FieldStorageConfig::create($data);
        $config->save();
    }

    if (!FieldConfig::loadByName('media', 'image', 'field_image')) {
        if ($siteStorage->exists('field.field.media.image.field_image')) {
            $data = $siteStorage->read('field.field.media.image.field_image');
        } else {
            $data = $moduleStorage->read('field.field.media.image.field_image');
        }

        $config = FieldConfig::create($data);
        $config->save();
    }

    // Migrate existing entities
    $mediaStorage = \Drupal::entityTypeManager()
        ->getStorage('media');
    $entityCache = \Drupal::getContainer()
        ->get('entity.memory_cache');
    $ids = $mediaStorage->getQuery()
        ->condition('bundle', 'image')
        ->accessCheck(false)
        ->execute();

    foreach (array_chunk($ids, 25) as $chunk) {
        /** @var MediaInterface[] $entities */
        $entities = \Drupal::entityTypeManager()
            ->getStorage('media')
            ->loadMultiple($chunk);

        foreach ($entities as $entity) {
            $values = $entity->get('field_media_imgix')->getValue();

            if (empty($values)) {
                continue;
            }

            $value = reset($values);
            $entity->set('field_image', [
                'target_id' => $value['target_id'],
                'alt' => $value['description'] ?? $value['alt'],
                'title' => $value['title'],
                'width' => $value['width'],
                'height' => $value['height'],
            ]);
            $entity->set('field_media_imgix', []);
            $entity->save();
        }

        $entityCache->deleteAll();
        gc_collect_cycles();
    }

    // Delete field_media_imgix
    if ($field = FieldConfig::loadByName('media', 'image', 'field_media_imgix')) {
        $field->delete();
    }

    if ($fieldStorage = FieldStorageConfig::loadByName('media', 'field_media_imgix')) {
        $fieldStorage->delete();
    }
}

/**
 * Update media image form & view display
 */
function wmmedia_update_8005(): void
{
    /** @var EntityFormDisplay $formDisplay */
    if ($formDisplay = EntityFormDisplay::load('media.image.default')) {
        if ($formDisplay->getComponent('field_media_imgix')) {
            $formDisplay->removeComponent('field_media_imgix');
        }

        $formDisplay->setComponent('field_image', [
            'weight' => 1,
            'settings' => [
                'progress_indicator' => 'throbber',
                'preview_image_style' => 'thumbnail',
            ],
            'third_party_settings' => [],
            'type' => 'image_image',
            'region' => 'content',
        ]);
        $formDisplay->save();
    }

    /** @var EntityViewDisplay $viewDisplay */
    if ($viewDisplay = EntityViewDisplay::load('media.image.default')) {
        if ($viewDisplay->getComponent('field_media_imgix')) {
            $viewDisplay->removeComponent('field_media_imgix');
        }

        $viewDisplay->setComponent('field_image', [
            'weight' => 0,
            'label' => 'above',
            'settings' => [
                'image_style' => 'thumbnail',
                'image_link' => '',
            ],
            'third_party_settings' => [],
            'type' => 'image',
            'region' => 'content',
        ]);
        $viewDisplay->save();
    }
}

/**
 * Update the image media type
 */
function wmmedia_update_8006(): void
{
    /** @var MediaType $mediaType */
    if (!$mediaType = MediaType::load('image')) {
        return;
    }

    $mediaType->set('source', 'image');
    $mediaType->set('source_configuration', [
        'source_field' => 'field_image',
    ]);
    $mediaType->save();
}

/**
 * Install the gallery thumb & large image styles
 */
function wmmedia_update_8007(): void
{
    $storage = new FileStorage(__DIR__ . '/config/install');
    $styleNames = [
        'wmmedia_gallery_large',
        'wmmedia_gallery_thumb',
    ];

    foreach ($styleNames as $styleName) {
        $data = $storage->read('image.style.' . $styleName);

        if (!ImageStyle::load($styleName)) {
            ImageStyle::create($data)->save();
        }
    }
}

/**
 * Update the image entity browsers
 */
function wmmedia_update_8008(): void
{
    /** @var EntityBrowser $entityBrowser */
    foreach (EntityBrowser::loadMultiple() as $entityBrowser) {
        /** @var WidgetInterface $widget */
        foreach ($entityBrowser->getWidgets() as $widget) {
            if ($widget->id() !== 'wmmedia_media_image_browser') {
                continue;
            }

            $configuration = $widget->getConfiguration();
            $configuration['settings']['image_style'] = 'medium';
            unset($configuration['settings']['preset']);

            $widget->setConfiguration($configuration);
            $entityBrowser->save();
        }
    }
}

/**
 * Migrate field_height, field_width, field_alternate, field_description and
 * field_copyright to base fields.
 */
function wmmedia_update_8009(): void
{
    $logger = \Drupal::logger('wmmedia');
    /* @var EntityFieldManagerInterface $fieldManager */
    $fieldManager = \Drupal::service('entity_field.manager');
    $fieldManager->clearCachedFieldDefinitions();

    // We instruct our base_field_definitions to not register the basefields,
    // the fields already exist as regular fields and need to be deleted first.
    // But if the base fields are registered, the field manager will not be able
    // to delete the correct existing fields.
    MediaBaseFieldDefinitions::$enabled = false;

    $db = \Drupal::database();
    // Store the current values in TEMP tables and delete the fields.
    foreach (['field_alternate', 'field_description', 'field_height', 'field_width', 'field_copyright'] as $field) {
        $db->query("CREATE TEMPORARY TABLE tmp_media__{$field} AS SELECT * FROM media__{$field}");

        $logger->info('Deleting ' . $field);

        // Remove the old field
        if ($fieldConfig = FieldConfig::loadByName('media', 'image', $field)) {
            $fieldConfig->delete();
        }
        if ($fieldStorage = FieldStorageConfig::loadByName('media', $field)) {
            $fieldStorage->delete();
        }
    }

    // Now the fields are deleted, we can register the base fields.
    MediaBaseFieldDefinitions::$enabled = true;
    $fieldManager->clearCachedFieldDefinitions();
    $fieldStorageDefinitions = $fieldManager->getFieldStorageDefinitions('media');

    foreach (['field_alternate', 'field_description', 'field_height', 'field_width', 'field_copyright'] as $field) {
        if (!isset($fieldStorageDefinitions[$field])) {
            throw new \RuntimeException("Field storage definition for {$field} not found.");
        }

        $logger->info('Recreating ' . $field);

        Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition(
            $field,
            'media',
            'wmmedia',
            $fieldStorageDefinitions[$field]
        );
    }

    // Migrate the data, we want to get the values from the temp tables
    // and update the media_field_data table with the new values.

    $logger->info('Migrating field_alternate data');
    $db->query('
        UPDATE media_field_data AS mfd
        INNER JOIN tmp_media__field_alternate AS alternate ON mfd.mid = alternate.entity_id AND mfd.langcode = alternate.langcode
        SET
          mfd.field_alternate = alternate.field_alternate_value
    ');

    $logger->info('Migrating field_description data');
    $db->query('
        UPDATE media_field_data AS mfd
        INNER JOIN tmp_media__field_description AS description ON mfd.mid = description.entity_id AND mfd.langcode = description.langcode
        SET
          mfd.field_description__value = description.field_description_value,
          mfd.field_description__format = description.field_description_format
    ');

    $logger->info('Migrating field_height data');
    $db->query('
        UPDATE media_field_data AS mfd
        INNER JOIN tmp_media__field_height AS height ON mfd.mid = height.entity_id AND mfd.langcode = height.langcode
        SET
          mfd.field_height = height.field_height_value
    ');

    $logger->info('Migrating field_width data');
    $db->query('
        UPDATE media_field_data AS mfd
        INNER JOIN tmp_media__field_width AS width ON mfd.mid = width.entity_id AND mfd.langcode = width.langcode
        SET
          mfd.field_width = width.field_width_value
    ');

    $logger->info('Migrating field_copyright data');
    $db->query('
        UPDATE media_field_data AS mfd
        INNER JOIN tmp_media__field_copyright AS copy ON mfd.mid = copy.entity_id AND mfd.langcode = copy.langcode
        SET
          mfd.field_copyright__value = copy.field_copyright_value,
          mfd.field_copyright__format = copy.field_copyright_format
    ');

    // Drop the temp tables
    foreach (['field_alternate', 'field_description', 'field_height', 'field_width', 'field_copyright'] as $field) {
        $db->query("DROP TEMPORARY TABLE tmp_media__{$field}");
    }
}
